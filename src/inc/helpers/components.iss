[Code]
const
  // This should match the [Types] section of this file.
  TYPES_COMBO_ITEMINDEX_FULL_INSTALLATION_WITHOUT_IDE = 0;
  TYPES_COMBO_ITEMINDEX_FULL_INSTALLATION = 1;
  TYPES_COMBO_ITEMINDEX_COMPACT_INSTALLATION = 2;
  TYPES_COMBO_ITEMINDEX_CUSTOM_INSTALLATION = 3;

var
  ComponentsListSelectableItemsCount,
  ComponentsListDisabledItemsCount,
  ComponentsListItemsCountWithoutIde: Integer;  

{ Generate "components.out" for optimizing the runtime execution speed in
  Release mode. See ComponentsListInitialize() below. }
procedure SaveComponentsListName(const FileName: String);
var
  i: Integer;
  Buffer: TStringList;
  
begin
  Buffer := TStringList.Create;
  try
    Buffer.Add('[Code]');
    Buffer.Add('{ This code has been generated by SaveComponentsListName');
    Buffer.Add('  To regenerate it, delete this file and run the Setup in');
    Buffer.Add('  DEBUG mode again. }');
    Buffer.Add('procedure InitializeComponentsListName();');
    Buffer.Add('begin');
    Buffer.Add(Format('  SetArrayLength(ComponentsListName, %d);', [
      Length(ComponentsListName)]));
    for i := 0 to GetArrayLength(ComponentsListName) - 1 do
    begin
      Buffer.Add(Format('  ComponentsListName[%d] := ''%s''; // %s', [
        i,
        ComponentsListName[i],
        WizardForm.ComponentsList.Items[i]
      ]));                           
    end;
    Buffer.Add('end;');
    Buffer.SaveToFile(FileName);
  finally
    Buffer.Free;
  end;
end;

{ Handle the ComponentsList combo box selection. }
procedure ComponentsListTypesComboUpdate();
var
  SelectedComponentsCount: Integer;

begin
  SelectedComponentsCount := GetSelectedComponentsCount(scmExcludeDisabledItems);

  Log(Format('Components List Status: %d selected of %d', [
    SelectedComponentsCount,
    ComponentsListSelectableItemsCount
  ]));
  
  if (SelectedComponentsCount = ComponentsListSelectableItemsCount) then
    WizardForm.TypesCombo.ItemIndex := TYPES_COMBO_ITEMINDEX_FULL_INSTALLATION
  else if (SelectedComponentsCount = 0) then
    WizardForm.TypesCombo.ItemIndex := TYPES_COMBO_ITEMINDEX_COMPACT_INSTALLATION
  else if not IsComponentSelected('{#IdeComponentsListName}') and (SelectedComponentsCount = ComponentsListItemsCountWithoutIde) then
    WizardForm.TypesCombo.ItemIndex := TYPES_COMBO_ITEMINDEX_FULL_INSTALLATION_WITHOUT_IDE
  else
    WizardForm.TypesCombo.ItemIndex := TYPES_COMBO_ITEMINDEX_CUSTOM_INSTALLATION;
end;

procedure ComponentsListClickCheck(Sender: TObject);
begin
  ComponentsListTypesComboUpdate();
end;

{ Initialize the "ComponentsListName" variable available in
  "inc/utils/components.iss". This could use the regular function:
  InitializeComponentsListNames() or use the generated "components.out" file. }
procedure ComponentsListInitialize(const FirstInitialization: Boolean);
begin
  Log(Format('ComponentsListInitialize called, first call: %s', [BoolToStr(FirstInitialization)]));

  if FirstInitialization then
  begin
#ifdef ComponentsListNameGenerated
    Log('ComponentsListNameGenerated defined: using pre-generated file');
    
    InitializeComponentsListName();
#endif

#if InstallerMode != RELEASE
    { Basically this means Debug, but this is NOT Debug code
      This is a trick used for Setup initialization in Release mode }

    if GetArrayLength(ComponentsListName) = 0 then
    begin
      Log('ComponentsListName is empty...');

      // Retrieve components name from the ComponentsList
      InitializeComponentsListNames();

      { Generate the Component List inventory file that will be used in RELEASE
        mode, while rebuilding this Setup. }
      if DirExists('..\src') then
      begin
        Log(Format('Generating "%s"...', ['{#GENERATED_COMPONENTS_LIST_FILE}']));
        SaveComponentsListName('..\src\{#GENERATED_COMPONENTS_LIST_FILE}');
      end;
    end;
#endif

    { Bind in the ComponentsList UI component a function to update TypesCombo
      Thanks to: https://stackoverflow.com/a/36989894/3726096 }
    WizardForm.ComponentsList.OnClickCheck := @ComponentsListClickCheck;
  end;

  // Get all disabled items from the ComponentsList
  ComponentsListDisabledItemsCount := GetComponentsListDisabledItemsCount();

  // Get all selectable items
  ComponentsListSelectableItemsCount := GetComponentsListCount()
    - ComponentsListDisabledItemsCount;

  // Get the IDE items from the ComponentsList
  ComponentsListItemsCountWithoutIde := ComponentsListSelectableItemsCount
    - GetComponentRootLevelItemsCount('{#IdeComponentsListName}');
  
#if InstallerMode == DEBUG
  Log(Format('+ ComponentsListDisabledItemsCount=%d, ComponentsListSelectableItemsCount=%d, ComponentsListItemsCountWithoutIde=%d', [
    ComponentsListDisabledItemsCount,
    ComponentsListSelectableItemsCount,
    ComponentsListItemsCountWithoutIde
  ])); 
#endif
end;
